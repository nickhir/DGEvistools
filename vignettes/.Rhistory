#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[comparisons_column])[1,]
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix()
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 5,
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
#' @param comparisons_column The name of the column which contains the different comparisons that you want to make.
#' @param ordering By which condition should the p values of the displayed gene sets be ranked
#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[comparisons_column])[1,]
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix()
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
x<<-wide_matrix
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 5,
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
x
x
unique(gsea_df[comparisons_column])
unique(GSEA_result["age"])[1,]
unique(GSEA_result["age"])
unique(GSEA_result[["age"]])
#' @param comparisons_column The name of the column which contains the different comparisons that you want to make.
#' @param ordering By which condition should the p values of the displayed gene sets be ranked
#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[[comparisons_column]])
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix()
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
x<<-wide_matrix
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 5,
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
-log10(0.5)
-log10(0.0005)
x
-log10(x)
#' @param comparisons_column The name of the column which contains the different comparisons that you want to make.
#' @param ordering By which condition should the p values of the displayed gene sets be ranked
#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[[comparisons_column]])
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix %>%
-log10(.)
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
x<<-wide_matrix
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 5,
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
# run GSEA and combine results in one dataframe
GSEA_result <- lapply(setNames(names(DGE_result),names(DGE_result)), function(age){
tmp <- clusterProfiler::GSEA(ranked_gene_list[[age]], TERM2GENE=h_gene_sets, pvalueCutoff = 1)@result %>%
dplyr::mutate(age=age)
}) %>% dplyr::bind_rows()
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 6,
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
10^-2
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 6,
ordering = "20 months",
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
#' @param comparisons_column The name of the column which contains the different comparisons that you want to make.
#' @param ordering By which condition should the p values of the displayed gene sets be ranked
#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[[comparisons_column]])
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
tests <<-wide_df
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix %>%
-log10(.)
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
x<<-wide_matrix
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 6,
ordering = "20 months",
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
tests
#' @param comparisons_column The name of the column which contains the different comparisons that you want to make.
#' @param ordering By which condition should the p values of the displayed gene sets be ranked
#' @param top_n The number of gene sets you want to display.
#' @param color A colormap for the heatmap
#' @param legend_title The title of the legend
#' @param title The title of the heatmap
#' @param remove_string A string that should be removed from all rownames of the heatmap.
#' @param ... Arguments are directly passed to \code{ComplexHeatmap::Heatmap}
#'
#' @export
enrichment_heatmap <- function(gsea_df, comparisons_column,
ordering = NULL,top_n=10,
color=viridis::plasma(50,end=0.75),
legend_title="-log10(FDR)",
title="",
remove_string=NULL, ...){
# this gets called by `cell_fun` of ComplexHeatmap and returns asteriscs according to p value.
annotate_sig <- function(j, i, x, y, w, h, fill) {
if(is.na(wide_matrix[i, j])) {
grid::grid.text("", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-4)) {
grid::grid.text("***", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-3)) {
grid::grid.text("**", x, y, gp=grid::gpar(col="white", fontsize=25))
} else if(wide_matrix[i, j] > -log10(1e-2)) {
grid::grid.text("*", x, y, gp=grid::gpar(col="white", fontsize=25))
}
}
comparisons <- unique(gsea_df[[comparisons_column]])
if (is.null(ordering)){
ordering <- comparisons[1]
}
# get the top n enriched terms for a selected tissue
ontologies_of_interest <- gsea_df %>%
dplyr::filter(get(comparisons_column)==ordering)%>%
dplyr::arrange(p.adjust) %>%
slice_head(n=top_n) %>%
pull(ID)
# get the p values of the selected ontologies for all other comparisons.
wide_df <- gsea_df %>%
dplyr::filter(ID %in% ontologies_of_interest) %>%
dplyr::select(c("ID","Description", "p.adjust",comparisons_column)) %>%
tidyr::pivot_wider(names_from = comparisons_column,
values_from = p.adjust)
# this matrix is necessary to annotate significance.
wide_matrix <- wide_df %>%
distinct(Description,.keep_all = T) %>%
tibble::column_to_rownames("Description") %>%
dplyr::select(all_of(comparisons)) %>%
dplyr::arrange(desc(get(ordering))) %>%
as.matrix()
if (!is.null(remove_string)){
rownames(wide_matrix) <- str_remove(rownames(wide_matrix), remove_string)
}
# Reformat the description, to make it more readable.
wide_matrix <- wide_matrix %>%
data.frame() %>%
tibble::rownames_to_column("name") %>%
dplyr::mutate(name = str_replace_all(name, "_"," ")) %>%
dplyr::mutate(name = str_wrap(name, 30)) %>%
tibble::column_to_rownames("name") %>%
as.matrix %>%
-log10(.)
# calculate an appropriate width of the cells
names_length <- max(nchar(colnames(wide_matrix)))
cellwidth = names_length*3
p <- ComplexHeatmap::Heatmap(wide_matrix, name=legend_title, cluster_rows = F,
cluster_columns = F,
border=T, width = ncol(wide_matrix)*unit(cellwidth, "mm"),
col = color, column_title=title,
column_names_rot = 45, cell_fun = annotate_sig,
...)
return(p)
}
enrichment_heatmap(gsea_df = GSEA_result,
top_n = 6,
ordering = "20 months",
comparisons_column = "age",
title = "Frontal Cortex",
color = viridis::plasma(50,end=0.75),
remove_string = "HALLMARK_") # remove uninformative string
